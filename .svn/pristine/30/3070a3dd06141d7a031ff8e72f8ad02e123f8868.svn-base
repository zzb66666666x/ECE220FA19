#include <stdint.h>
#include <stdio.h>

#include "visualize.h"
#include "mp11.h"

#define MY_INFINITY   1000000000



void
find_nodes (locale_t* loc, vertex_set_t* vs, pyr_tree_t* p, int32_t nnum)
{
    // Do not modify the following line nor add anything above in the function.
    record_fn_call ();
	int32_t id,x, y_left, y_right,range,loc_x,loc_y;
	if (n > (p->n_nodes)){
		return;
	}
	else{
		x = (p->node)[nnum].x;
		y_left = (p->node)[nnum].y_left;
		y_right = (p->node)[nnum].y_right;
		if (4*nnum+1 > (p->n_nodes)){
			//leaf
			if ((vs->count <= MAX_IN_VERTEX_SET)&&(inrange(loc,x,y_left))){
				id = (p->node)[nnum].id;
				vs->id[vs->count] = id;
				vs->count++;
			}
			//recognized one leaf, return to find another one
			return;
		}
		else{
			//not yet: at internal node 
			//consider which subtree should I go 
			//only four possibilities
			range = loc->range;
			loc_x = loc->x;
			loc_y = loc->y;
			if (((loc_x-range)<=x)&&((loc_y-range)<=y_left)){
				find_nodes(loc,vs,p,nnum*4+1);
			}
			if (((loc_x-range)<=x)&&((loc_y+range)>=y_left)){
				find_nodes(loc,vs,p,nnum*4+3);
			}
			if (((loc_x+range)>=x)&&((loc_y-range)<=y_right)){
				find_nodes(loc,vs,p,nnum*4+2);
			}
			if (((loc_x+range)>=x)&&((loc_y+range)>=y_right)){
				find_nodes(loc,vs,p,nnum*4+4);		
			}
		}
	}
	return;
}


void
trim_nodes (graph_t* g, vertex_set_t* vs, locale_t* loc)
{
//Remember to update the count in the vertex set like src_vs and dst_vs
	int32_t temp[MAX_IN_VERTEX_SET];
	int32_t tot = vs->count;
	int32_t count = 0;
	int32_t x,y;
	for (int i = 0; i < tot; i++)
	{
		x = (g->vertex)[(vs->id)[i]].x;
		y = (g->vertex)[(vs->id)[i]].y;
		if (in_range(loc,x,y)){
			temp[count] = (vs->id)[i];
			count++;
		}
	}
	vs->count = count;
	for (int i = 0; i < count; i++)
	{
		(vs->id)[i] = temp[i];
	}
	return;
}


int32_t
dijkstra (graph_t* g, heap_t* h, vertex_set_t* src, vertex_set_t* dest,
          path_t* path)
{
	//Variables
	int32_t node = (src->id)[0];
	int32_t update = 0;
	//Initialize
	graph_from_src_init(g,src);
	heap_init(g,h,node,&update);
	//begin the algorithm
	while (update != 0)
	{
		
	}

    return 0;
}

void graph_from_src_init(graph_t * g, vertex_set_t * src_vs)
{
	for (int i = 0; i < g-> n_vertices; i++)
	{
		(g->vertex)[i].from_src = MY_INFINITY;
	}
	for (int i = 0; i < src_vs->count; i++)
	{
		(g->vertex)[(src_vs->id)[i]].from_src = 0;
	}
	return;
}

void heap_init(graph_t * g, heap_t * h, int32_t node, int32_t * update)
{
	//the array of heap: (h->elt)[]
	//the array of graph: (g->vertex)[]
	int32_t * neighbor = (g->vertex)[node].neighbor;
	int32_t * distance = (g->vertex)[node].distance;
	int32_t n_neig = (g->vertex)[node].n_neighbors;
	for (int i = 0; i < n_neig; i++)
	{
		(g->vertex)[neighbor[i]].from_src = distance[i];
		(g->vertex)[neighbor[i]].pred = node;
		(*update)++;
		heap_insert(g,h,neighbor[i]);
	}
}

void heap_insert(graph_t * g, heap_t * h, int32_t id)
{
	int32_t index;
	(h->elt)[n_elts] = id;
	(h->n_elts)++;
	index = up_heap(g,h,(h->n_elts)-1);
	(g->vertex)[id].heap_id = index;
	return;
}

int32_t heap_pop()
{
	
}

int32_t up_heap(graph_t * g, heap_t * h, int32_t elt_index)
{
	if (elt_index == 0){
		return elt_index;
	}
	int32_t id = (h->elt)[elt_index];		//this is an id of the insert graph node
	int32_t half_index = (elt_index-1)/2;
	int32_t half_index_id = (h->elt)[half_index];
	if ((g->vertex)[id].from_src>=(g->vertex)[half_index_id].from_src){
		return elt_index;
	}
	else{
		(h->elt)[elt_index] = half_index_id;
		(h->elt)[half_index] = id;
		up_heap(g,h,half_index);
	}
}

void down_heap()
{

}
